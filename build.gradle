<<<<<<< .mine

=======
// 从maven库中下载编译脚步
>>>>>>> .theirs
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
<<<<<<< .mine
        classpath 'com.android.tools.build:gradle:1.0.0'
=======
        classpath 'com.android.tools.build:gradle:1.3.0'
>>>>>>> .theirs
    }
}

<<<<<<< .mine
apply plugin: 'android-library'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
=======
// 有这一段，才会在maven中心下载需要的依赖库
repositories {
    mavenCentral()

>>>>>>> .theirs
}


dependencies {
    // 依赖整个libs文件夹下的所有jar包
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

android {
    compileSdkVersion 19
<<<<<<< .mine
    buildToolsVersion "21.1.1"


=======
    // 这个版本号，参考SDK目录中的对应文件夹
    // 这个并不是SDK的版本号
    buildToolsVersion "22.0.1"
>>>>>>> .theirs

    // 设置SDK版本适配
    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 19
    }

    // 指定包名
//    defaultConfig {
//        applicationId "com.tencent.cosdk.demo.am"
//    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

<<<<<<< .mine














=======
//task deleteMySo(type: Delete) {
//    description = 'Rename libs，so that it wont collapse with the example libs.'
//    delete fileTree('build/intermediates/exploded-aar/MidasTVPayProject/MidasPayTVSDK/unspecified/jni') {
//        include '**/*.so'
//    }
//}
//
//task copyMyFiles(type:Copy) {
//    from project(':MidasPayTVSDK').file('res')
//    into file('res')
//}
//
//assembleDebug.dependsOn deleteMySo
//assembleDebug.dependsOn copyMyFiles
>>>>>>> .theirs
